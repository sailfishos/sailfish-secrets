import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -dependencies dependencies.json Sailfish.Secrets 1.0'

Module {
    dependencies: [
        "Nemo.Configuration 1.0",
        "Nemo.Thumbnailer 1.0",
        "QtQml.Models 2.2",
        "QtQuick 2.6",
        "QtQuick.Window 2.1",
        "Sailfish.Silica.private 1.0"
    ]
    Component {
        name: "Sailfish::Secrets::CollectionNamesRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/CollectionNamesRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "collectionNames"; type: "QStringList"; isReadonly: true }
        Method {
            name: "isCollectionLocked"
            type: "bool"
            Parameter { name: "collectionName"; type: "string" }
        }
    }
    Component {
        name: "Sailfish::Secrets::CreateCollectionRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/CreateCollectionRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "collectionLockType"; type: "CollectionLockType" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "encryptionPluginName"; type: "string" }
        Property { name: "authenticationPluginName"; type: "string" }
        Property {
            name: "deviceLockUnlockSemantic"
            type: "Sailfish::Secrets::SecretManager::DeviceLockUnlockSemantic"
        }
        Property {
            name: "customLockUnlockSemantic"
            type: "Sailfish::Secrets::SecretManager::CustomLockUnlockSemantic"
        }
        Property {
            name: "accessControlMode"
            type: "Sailfish::Secrets::SecretManager::AccessControlMode"
        }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
    }
    Component {
        name: "Sailfish::Secrets::DeleteCollectionRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/DeleteCollectionRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "collectionName"; type: "string" }
        Property { name: "storagePluginName"; type: "string" }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
    }
    Component {
        name: "Sailfish::Secrets::DeleteSecretRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/DeleteSecretRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifier"; type: "Sailfish::Secrets::Secret::Identifier" }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
    }
    Component {
        name: "Sailfish::Secrets::FindSecretsRequest"
        prototype: "Sailfish::Secrets::Request"
        Property { name: "collectionName"; type: "string" }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "filter"; type: "Sailfish::Secrets::Secret::FilterData" }
        Property { name: "filterOperator"; type: "Sailfish::Secrets::SecretManager::FilterOperator" }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
        Property {
            name: "identifiers"
            type: "QVector<Sailfish::Secrets::Secret::Identifier>"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Secrets::HealthCheckRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/HealthCheckRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Health"
            values: {
                "HealthOK": 0,
                "HealthUnknown": 1,
                "HealthCorrupted": 2,
                "HealthOtherError": 3
            }
        }
        Property { name: "saltDataHealth"; type: "Health"; isReadonly: true }
        Property { name: "masterlockHealth"; type: "Health"; isReadonly: true }
        Property { name: "isHealthy"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::InteractionParameters"
        exports: ["Sailfish.Secrets/InteractionParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputType"
            values: {
                "UnknownInput": 0,
                "AuthenticationInput": 1,
                "ConfirmationInput": 2,
                "NumericInput": 4,
                "AlphaNumericInput": 8,
                "FingerprintInput": 16,
                "IrisInput": 32,
                "RetinaInput": 64,
                "LastInputType": 65536
            }
        }
        Enum {
            name: "EchoMode"
            values: {
                "UnknownEcho": 0,
                "NormalEcho": 1,
                "PasswordEcho": 2,
                "NoEcho": 3,
                "LastEchoMode": 63
            }
        }
        Enum {
            name: "Operation"
            values: {
                "UnknownOperation": 0,
                "RequestUserData": 1,
                "UnlockDatabase": 2,
                "LockDatabase": 4,
                "ModifyLockDatabase": 8,
                "UnlockPlugin": 16,
                "LockPlugin": 32,
                "ModifyLockPlugin": 64,
                "CreateCollection": 128,
                "UnlockCollection": 256,
                "LockCollection": 512,
                "ModifyLockCollection": 1024,
                "DeleteCollection": 2048,
                "ReadSecret": 4096,
                "StoreSecret": 8192,
                "UnlockSecret": 16384,
                "LockSecret": 32768,
                "ModifyLockSecret": 65536,
                "DeleteSecret": 131072,
                "Encrypt": 262144,
                "Decrypt": 524288,
                "Sign": 1048576,
                "Verify": 2097152,
                "DeriveDigest": 4194304,
                "DeriveMac": 8388608,
                "DeriveKey": 16777216,
                "StoreKey": 33554432,
                "ImportKey": 67108864,
                "CreatePassword": 134217728,
                "LastOperation": 1073741824
            }
        }
        Enum {
            name: "Prompt"
            values: {
                "Message": 0,
                "Instruction": 16,
                "NewInstruction": 17,
                "RepeatInstruction": 18,
                "Accept": 32,
                "Cancel": 48
            }
        }
        Property { name: "secretName"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "pluginName"; type: "string" }
        Property { name: "applicationId"; type: "string" }
        Property { name: "operation"; type: "Operation" }
        Property { name: "authenticationPluginName"; type: "string" }
        Property { name: "promptText"; type: "Sailfish::Secrets::InteractionParameters::PromptText" }
        Property { name: "inputType"; type: "InputType" }
        Property { name: "echoMode"; type: "EchoMode" }
    }
    Component {
        name: "Sailfish::Secrets::InteractionParameters::PromptText"
        exports: ["Sailfish.Secrets/PromptText 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "message"; type: "string" }
        Property { name: "instruction"; type: "string" }
        Property { name: "newInstruction"; type: "string" }
        Property { name: "repeatInstruction"; type: "string" }
        Property { name: "accept"; type: "string" }
        Property { name: "cancel"; type: "string" }
    }
    Component {
        name: "Sailfish::Secrets::InteractionRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/InteractionRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "interactionParameters"; type: "Sailfish::Secrets::InteractionParameters" }
        Signal { name: "userInputChanged" }
    }
    Component {
        name: "Sailfish::Secrets::InteractionResponse"
        exports: ["Sailfish.Secrets/InteractionResponse 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "result"; type: "Sailfish::Secrets::Result" }
        Property { name: "responseData"; type: "QByteArray" }
    }
    Component {
        name: "Sailfish::Secrets::LockCodeRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/LockCodeRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LockCodeRequestType"
            values: {
                "QueryLockStatus": 0,
                "ModifyLockCode": 1,
                "ProvideLockCode": 2,
                "ForgetLockCode": 3
            }
        }
        Enum {
            name: "LockCodeTargetType"
            values: {
                "MetadataDatabase": 0,
                "ExtensionPlugin": 1
            }
        }
        Enum {
            name: "LockStatus"
            values: {
                "Unknown": 0,
                "Unsupported": 1,
                "Unlocked": 2,
                "Locked": 3
            }
        }
        Property { name: "lockCodeRequestType"; type: "LockCodeRequestType" }
        Property { name: "lockCodeTargetType"; type: "LockCodeTargetType" }
        Property { name: "lockCodeTarget"; type: "string" }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
        Property { name: "interactionParameters"; type: "Sailfish::Secrets::InteractionParameters" }
        Property { name: "lockStatus"; type: "LockStatus"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::Plugin::ApplicationInteractionView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Secrets/ApplicationInteractionView 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConfirmationValue"
            values: {
                "Unknown": 0,
                "Allow": 1,
                "Deny": 2
            }
        }
        Property { name: "adapter"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "secretManager"; type: "QObject"; isPointer: true }
        Signal { name: "canceled" }
        Signal { name: "finished" }
        Method {
            name: "setSecretManager"
            Parameter { name: "manager"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "Sailfish::Secrets::Plugin::ApplicationInteractionViewPrivate"
        prototype: "QObject"
        Property { name: "confirmation"; type: "int" }
        Property { name: "password"; type: "string" }
        Property { name: "interactionParameters"; type: "InteractionParameters"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::Plugin::FindSecretsRequestWrapper"
        prototype: "Sailfish::Secrets::FindSecretsRequest"
        exports: ["Sailfish.Secrets/FindSecretsRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifiers"; type: "QVariantList"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::Plugin::PluginInfoRequestWrapper"
        prototype: "Sailfish::Secrets::PluginInfoRequest"
        exports: ["Sailfish.Secrets/PluginInfoRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "storagePlugins"; type: "QVariantList"; isReadonly: true }
        Property { name: "encryptionPlugins"; type: "QVariantList"; isReadonly: true }
        Property { name: "encryptedStoragePlugins"; type: "QVariantList"; isReadonly: true }
        Property { name: "authenticationPlugins"; type: "QVariantList"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::Plugin::SecretManager"
        prototype: "Sailfish::Secrets::SecretManager"
        exports: ["Sailfish.Secrets/SecretManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "inAppAuthenticationPluginName"; type: "string"; isReadonly: true }
        Property { name: "defaultAuthenticationPluginName"; type: "string"; isReadonly: true }
        Property { name: "defaultStoragePluginName"; type: "string"; isReadonly: true }
        Property { name: "defaultEncryptionPluginName"; type: "string"; isReadonly: true }
        Property { name: "defaultEncryptedStoragePluginName"; type: "string"; isReadonly: true }
        Method { name: "constructResult"; type: "Sailfish::Secrets::Result" }
        Method { name: "constructSecret"; type: "Sailfish::Secrets::Secret" }
        Method {
            name: "constructInteractionParameters"
            type: "Sailfish::Secrets::InteractionParameters"
        }
        Method {
            name: "constructInteractionResponse"
            type: "Sailfish::Secrets::InteractionResponse"
        }
        Method {
            name: "constructFilterData"
            type: "Sailfish::Secrets::Secret::FilterData"
            Parameter { name: "v"; type: "QVariantMap" }
        }
        Method {
            name: "toBase64"
            type: "string"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "fromBase64"
            type: "QByteArray"
            Parameter { name: "b64"; type: "string" }
        }
        Method {
            name: "stringFromBytes"
            type: "string"
            Parameter { name: "stringData"; type: "QByteArray" }
        }
    }
    Component {
        name: "Sailfish::Secrets::PluginInfo"
        exports: ["Sailfish.Secrets/PluginInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Unknown": 0,
                "Available": 1,
                "MasterUnlocked": 2,
                "PluginUnlocked": 4,
                "PluginSupportsLocking": 8,
                "PluginSupportsSetLockCode": 16
            }
        }
        Enum {
            name: "StatusFlags"
            values: {
                "Unknown": 0,
                "Available": 1,
                "MasterUnlocked": 2,
                "PluginUnlocked": 4,
                "PluginSupportsLocking": 8,
                "PluginSupportsSetLockCode": 16
            }
        }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "version"; type: "int"; isReadonly: true }
        Property { name: "statusFlags"; type: "StatusFlags"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Secrets::PluginInfoRequest"
        prototype: "Sailfish::Secrets::Request"
        Property {
            name: "storagePlugins"
            type: "QVector<Sailfish::Secrets::PluginInfo>"
            isReadonly: true
        }
        Property {
            name: "encryptionPlugins"
            type: "QVector<Sailfish::Secrets::PluginInfo>"
            isReadonly: true
        }
        Property {
            name: "encryptedStoragePlugins"
            type: "QVector<Sailfish::Secrets::PluginInfo>"
            isReadonly: true
        }
        Property {
            name: "authenticationPlugins"
            type: "QVector<Sailfish::Secrets::PluginInfo>"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Secrets::Request"
        prototype: "QObject"
        exports: ["Sailfish.Secrets/Request 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Active": 1,
                "Finished": 2
            }
        }
        Property { name: "manager"; type: "Sailfish::Secrets::SecretManager"; isPointer: true }
        Property { name: "status"; type: "Sailfish::Secrets::Request::Status"; isReadonly: true }
        Property { name: "result"; type: "Sailfish::Secrets::Result"; isReadonly: true }
        Method { name: "startRequest" }
        Method { name: "waitForFinished" }
    }
    Component {
        name: "Sailfish::Secrets::Result"
        exports: ["Sailfish.Secrets/Result 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ResultCode"
            values: {
                "Succeeded": 0,
                "Pending": 1,
                "Failed": 2
            }
        }
        Enum {
            name: "ErrorCode"
            values: {
                "NoError": 0,
                "UnknownError": 2,
                "SerializationError": 3,
                "DaemonError": 5,
                "DiscoveryError": 6,
                "PermissionsError": 10,
                "IncorrectAuthenticationCodeError": 11,
                "AuthenticationTimeoutError": 12,
                "OperationNotSupportedError": 13,
                "OperationRequiresUserInteraction": 14,
                "OperationRequiresApplicationUserInteraction": 15,
                "OperationRequiresSystemUserInteraction": 16,
                "SecretManagerNotInitializedError": 17,
                "SecretsDaemonRequestPidError": 20,
                "SecretsDaemonRequestQueueFullError": 21,
                "SecretsDaemonLockedError": 22,
                "SecretsDaemonNotLockedError": 23,
                "SecretsPluginEncryptionError": 30,
                "SecretsPluginDecryptionError": 31,
                "SecretsPluginKeyDerivationError": 32,
                "SecretsPluginIsLockedError": 33,
                "InvalidSecretError": 40,
                "InvalidSecretIdentifierError": 41,
                "InvalidFilterError": 42,
                "InvalidCollectionError": 43,
                "InvalidExtensionPluginError": 44,
                "InvalidApplicationIdError": 45,
                "CollectionAlreadyExistsError": 46,
                "SecretAlreadyExistsError": 47,
                "CollectionIsLockedError": 60,
                "CollectionIsBusyError": 61,
                "DatabaseQueryError": 70,
                "DatabaseTransactionError": 71,
                "DatabaseError": 72,
                "InteractionServiceUnknownError": 80,
                "InteractionServiceUnavailableError": 81,
                "InteractionServiceRequestInvalidError": 82,
                "InteractionServiceRequestFailedError": 83,
                "InteractionServiceRequestBusyError": 84,
                "InteractionServiceResponseInvalidError": 85,
                "InteractionViewUnavailableError": 90,
                "InteractionViewRequestError": 91,
                "InteractionViewParentError": 92,
                "InteractionViewChildError": 93,
                "InteractionViewError": 94,
                "InteractionViewUserCanceledError": 95,
                "NetworkError": 98,
                "NetworkSslError": 99,
                "HttpContinue": 100,
                "HttpSwitchingProtocol": 101,
                "HttpOk": 200,
                "HttpCreated": 201,
                "HttpAccepted": 202,
                "HttpNonAuthoritativeInformation": 203,
                "HttpNoContent": 204,
                "HttpResetContent": 205,
                "HttpPartialContent": 206,
                "HttpMultipleChoice": 300,
                "HttpMovedPermanently": 301,
                "HttpFound": 302,
                "HttpSeeOther": 303,
                "HttpNotModified": 304,
                "HttpUseProxy": 305,
                "HttpUnused": 306,
                "HttpTemporaryRedirect": 307,
                "HttpPermanentRedirect": 308,
                "HttpBadRequest": 400,
                "HttpUnauthorized": 401,
                "HttpPaymentRequired": 402,
                "HttpForbidden": 403,
                "HttpNotFound": 404,
                "HttpMethodNotAllowed": 405,
                "HttpNotAcceptable": 406,
                "HttpProxyAuthenticationRequired": 407,
                "HttpRequestTimeout": 408,
                "HttpConflict": 409,
                "HttpGone": 410,
                "HttpLengthRequired": 411,
                "HttpPreconditionFailed": 412,
                "HttpPayloadTooLarge": 413,
                "HttpUriTooLong": 414,
                "HttpUnsupportedMediaType": 415,
                "HttpRequestRangeNotSatisfiable": 416,
                "HttpExpectationFailed": 417,
                "HttpMisdirectedRequest": 421,
                "HttpUpgradeRequired": 426,
                "HttpPreconditionRequired": 428,
                "HttpTooManyRequests": 429,
                "HttpRequestHeaderFieldsTooLarge": 431,
                "HttpUnavailableForLegalReasons": 451,
                "HttpInternalServerError": 500,
                "HttpNotImplemented": 501,
                "HttpBadGateway": 502,
                "HttpServiceUnavailable": 503,
                "HttpGatewayTimeout": 504,
                "HttpVersionNotSupported": 505,
                "HttpVariantAlsoNegotiates": 506,
                "HttpInsufficientStorage": 507,
                "HttpNetworkAuthenticationRequired": 511,
                "OtherError": 1024
            }
        }
        Property { name: "errorMessage"; type: "string" }
        Property { name: "errorCode"; type: "Sailfish::Secrets::Result::ErrorCode" }
        Property { name: "code"; type: "Sailfish::Secrets::Result::ResultCode" }
        Method {
            name: "setErrorCode"
            Parameter { name: "c"; type: "int" }
        }
        Method {
            name: "setCode"
            Parameter { name: "c"; type: "int" }
        }
    }
    Component {
        name: "Sailfish::Secrets::Secret"
        exports: ["Sailfish.Secrets/Secret 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "filterDataFields"; type: "QStringList"; isReadonly: true }
        Method {
            name: "filterData"
            type: "string"
            Parameter { name: "field"; type: "string" }
        }
        Method {
            name: "setFilterData"
            Parameter { name: "field"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "hasFilterData"
            type: "bool"
            Parameter { name: "field"; type: "string" }
        }
    }
    Component {
        name: "Sailfish::Secrets::SecretManager"
        prototype: "QObject"
        Enum {
            name: "UserInteractionMode"
            values: {
                "PreventInteraction": 0,
                "SystemInteraction": 1,
                "ApplicationInteraction": 2
            }
        }
        Enum {
            name: "AccessControlMode"
            values: {
                "OwnerOnlyMode": 0,
                "SystemAccessControlMode": 1,
                "NoAccessControlMode": 2
            }
        }
        Enum {
            name: "DeviceLockUnlockSemantic"
            values: {
                "DeviceLockKeepUnlocked": 0,
                "DeviceLockVerifyLock": 1,
                "DeviceLockRelock": 2
            }
        }
        Enum {
            name: "CustomLockUnlockSemantic"
            values: {
                "CustomLockKeepUnlocked": 8,
                "CustomLockDeviceLockRelock": 9,
                "CustomLockTimoutRelock": 10,
                "CustomLockAccessRelock": 11
            }
        }
        Enum {
            name: "FilterOperator"
            values: {
                "OperatorOr": 0,
                "OperatorAnd": 1
            }
        }
        Signal { name: "isInitializedChanged" }
    }
    Component {
        name: "Sailfish::Secrets::StoreSecretRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/StoreSecretRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "secretStorageType"; type: "SecretStorageType" }
        Property { name: "encryptionPluginName"; type: "string" }
        Property { name: "authenticationPluginName"; type: "string" }
        Property { name: "secret"; type: "Sailfish::Secrets::Secret" }
        Property { name: "interactionParameters"; type: "Sailfish::Secrets::InteractionParameters" }
        Property {
            name: "deviceLockUnlockSemantic"
            type: "Sailfish::Secrets::SecretManager::DeviceLockUnlockSemantic"
        }
        Property {
            name: "customLockUnlockSemantic"
            type: "Sailfish::Secrets::SecretManager::CustomLockUnlockSemantic"
        }
        Property {
            name: "accessControlMode"
            type: "Sailfish::Secrets::SecretManager::AccessControlMode"
        }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
    }
    Component {
        name: "Sailfish::Secrets::StoredSecretRequest"
        prototype: "Sailfish::Secrets::Request"
        exports: ["Sailfish.Secrets/StoredSecretRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifier"; type: "Sailfish::Secrets::Secret::Identifier" }
        Property {
            name: "userInteractionMode"
            type: "Sailfish::Secrets::SecretManager::UserInteractionMode"
        }
        Property { name: "secret"; type: "Sailfish::Secrets::Secret"; isReadonly: true }
    }
}
